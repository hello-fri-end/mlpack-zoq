jobs:


- job: WindowsVS15
  timeoutInMinutes: 360
  pool:
    vmImage: vs2017-win2016
  strategy:
    matrix:
      Plain:
        CMakeArgs: '-DDEBUG=ON -DPROFILE=OFF -DBUILD_PYTHON_BINDINGS=OFF'
        python.version: '2.7'

  steps:
  - checkout: self
    clean: true
    fetchDepth: 1
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
  - task: NuGetToolInstaller@0
    inputs:
      versionSpec: '5.3.0'

  # Fetch build dependencies
  - bash: |
      nuget install OpenBLAS -o $(Agent.ToolsDirectory)
      nuget install boost -o $(Agent.ToolsDirectory) -Version 1.60.0
      nuget install boost_unit_test_framework-vc140 -o $(Agent.ToolsDirectory) -Version 1.60.0
      nuget install boost_program_options-vc140 -o $(Agent.ToolsDirectory) -Version 1.60.0
      nuget install boost_random-vc140 -o $(Agent.ToolsDirectory) -Version 1.60.0
      nuget install boost_serialization-vc140 -o $(Agent.ToolsDirectory) -Version 1.60.0
      nuget install boost_math_c99-vc140 -o $(Agent.ToolsDirectory) -Version 1.60.0
      nuget install OpenBLAS -o $(Agent.ToolsDirectory)

      mkdir -p $(Agent.ToolsDirectory)/boost_libs
      cp $(Agent.ToolsDirectory)/boost_program_options-vc140.1.60.0.0/lib/native/address-model-64/lib/*.* $(Agent.ToolsDirectory)/boost_libs
      cp $(Agent.ToolsDirectory)/boost_math_c99-vc140.1.60.0.0/lib/native/address-model-64/lib/*.* $(Agent.ToolsDirectory)/boost_libs
      cp $(Agent.ToolsDirectory)/boost_random-vc140.1.60.0.0/lib/native/address-model-64/lib/*.* $(Agent.ToolsDirectory)/boost_libs
      cp $(Agent.ToolsDirectory)/boost_serialization-vc140.1.60.0.0/lib/native/address-model-64/lib/*.* $(Agent.ToolsDirectory)/boost_libs
      cp $(Agent.ToolsDirectory)/boost_unit_test_framework-vc140.1.60.0.0/lib/native/address-model-64/lib/*.* $(Agent.ToolsDirectory)/boost_libs

      curl http://masterblaster.mlpack.org:5005/armadillo-8.400.0.tar.gz | tar xvz
    displayName: 'Fetch build dependencies'

# Configure armadillo
  - bash: |
      cd armadillo-8.400.0/ && cmake -G "Visual Studio 15 2017 Win64" \
      -DBLAS_LIBRARY:FILEPATH=$(Agent.ToolsDirectory)/OpenBLAS.0.2.14.1/lib/native/lib/x64/libopenblas.dll.a \
      -DLAPACK_LIBRARY:FILEPATH=$(Agent.ToolsDirectory)/OpenBLAS.0.2.14.1/lib/native/lib/x64/libopenblas.dll.a \
      -DCMAKE_PREFIX:FILEPATH=../../armadillo \
      -DBUILD_SHARED_LIBS=OFF \
      -DCMAKE_BUILD_TYPE=Release .
    displayName: 'Configure armadillo'

# Build armadillo
  - task: MSBuild@1
    inputs:
      solution: 'armadillo-8.400.0/*.sln'
      msbuildLocationMethod: 'location'
      msbuildVersion: '15.0'
      configuration: 'Release'
      msbuildArchitecture: 'x64'
      msbuildArguments: /m /p:BuildInParallel=true
      clean: false
      maximumCpuCount: false
    displayName: 'Build armadillo'

# Configure mlpack
  - bash: |
      mkdir build && cd build && \
      cmake -G "Visual Studio 15 2017 Win64" \
      -DBLAS_LIBRARY:FILEPATH=$(Agent.ToolsDirectory)/OpenBLAS.0.2.14.1/lib/native/lib/x64/libopenblas.dll.a \
      -DLAPACK_LIBRARY:FILEPATH=$(Agent.ToolsDirectory)/OpenBLAS.0.2.14.1/lib/native/lib/x64/libopenblas.dll.a \
      -DARMADILLO_INCLUDE_DIR="../armadillo-8.400.0/include" \
      -DARMADILLO_LIBRARY:FILEPATH="../armadillo-8.400.0/Release/armadillo.lib" \
      -DBOOST_INCLUDEDIR:PATH=$(Agent.ToolsDirectory)/boost.1.60.0.0/lib/native/include \
      -DBOOST_LIBRARYDIR:PATH=$(Agent.ToolsDirectory)/boost_libs \
      -DDEBUG=OFF \
      -DPROFILE=OFF \
      -DBUILD_PYTHON_BINDINGS=OFF \
      -DCMAKE_BUILD_TYPE=Release .. \
    displayName: 'Configure mlpack'

# Build mlpack
  - task: MSBuild@1
    inputs:
      solution: 'build/*.sln'
      msbuildLocationMethod: 'location'
      msbuildVersion: '15.0'
      configuration: 'Release'
      msbuildArchitecture: 'x64'
      msbuildArguments: /m /p:BuildInParallel=true
      maximumCpuCount: false
      clean: false
    displayName: 'Build mlpack'

# Run tests
  - powershell: |
      cp $(Agent.ToolsDirectory)\boost_libs\*.* build\
      cp $(Agent.ToolsDirectory)\OpenBLAS.0.2.14.1\lib\native\lib\x64\*.* build\
      cp $(Agent.ToolsDirectory)\OpenBLAS.0.2.14.1\lib\native\bin\x64\*.* build\

      cd build
      Release\mlpack_test.exe --result_code=no --report_level=detailed --log_level=test_suite --log_format=HRF --log_sink=res.txt
    displayName: 'Run tests'

# Process test results
  - bash: |
      curl https://gist.githubusercontent.com/zoq/9ccf753c4b61efcc5e6f0452c9c22e26/raw/a7790189a530925a5575b2dc45fdc6b915b01313/convert.py -O
      python convert.py > mlpack_test.xml
    displayName: 'Process test results'

# Publish test results to Azure Pipelines
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: 'mlpack_test.xml'
      failTaskOnFailedTests: true
    displayName: 'Publish tests'

# Build artifacts
  - bash: |
      7z a mlpack-windows-vs15-no-libs.zip build/Release/*.exe
      7z a mlpack-windows-vs15.zip build/Release/*.*
    displayName: 'Build artifacts'

# Pulling documentation for the installer
  - bash: |
      mkdir -p dist/win-installer/staging/lib
      curl http://ci.mlpack.org/job/mlpack%20-%20doxygen%20build/lastSuccessfulBuild/artifact/build/doc/html/*zip*/html.zip -o jenkinsdoc.zip
    displayName: 'Pulling documentation for the installer'

# Extract documentation for the installer
  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: 'jenkinsdoc.zip' 
      destinationFolder: 'dist/win-installer/staging/doc'
      cleanDestinationFolder: true
    displayName: 'Extract documentation for the installer'

# Preparing installer staging
  - powershell : |
      cp build\Release\*.lib dist\win-installer\staging\lib\
      cp build\Release\*.exp dist\win-installer\staging\lib\
      cp build\Release\*.dll dist\win-installer\staging\
      cp build\Release\*.exe dist\win-installer\staging\
      cp $(Agent.ToolsDirectory)\OpenBLAS.0.2.14.1\lib\native\bin\x64\*.dll dist\win-installer\staging\
      cp $(Agent.ToolsDirectory)\boost_libs\boost_unit_test_framework-vc*.dll dist\win-installer\staging\

      cp build\include\mlpack dist\win-installer\staging -recurse
      cp doc\examples dist\win-installer\staging -recurse
      cp tests\data\german.csv dist\win-installer\staging\examples\sample-ml-app\sample-ml-app\data\
    displayName: 'Preparing installer staging'

# Preparing installer staging
  - powershell : |
      $ver = (Get-Content
      "src\mlpack\core\util\version.hpp" |
      where {$_ -like "*MLPACK_VERSION*"});
      $env:MLPACK_VERSION += $ver[0].substring($ver[0].length - 1, 1) + '.';
      $env:MLPACK_VERSION += $ver[1].substring($ver[1].length - 1, 1) + '.';
      $env:MLPACK_VERSION += $ver[2].substring($ver[2].length - 1, 1);
      if (Test-Path ${env:GIT_VERSION_FILE})
      {
        $ver = (Get-Content ${env:GIT_VERSION_FILE});
        $env:INSTALL_VERSION = $ver.Split('"')[1].Split(' ')[1];
      }
      else
      {
        $env:INSTALL_VERSION = $env:MLPACK_VERSION;
      }

      echo INSTALL_VERSION is %INSTALL_VERSION%

      cd dist\win-installer\mlpack-win-installer

      heat dir ..\staging -cg HeatGenerated -dr INSTALLFOLDER -sreg -srd -var var.HarvestPath -ag -sfrag -out HeatGeneratedFileList.wxs

      candle -dHarvestPath=..\staging
      -dConfiguration=Release
      -dOutDir=bin\x64\Release\
      -dPlatform=x64
      -dProjectDir=.
      -dProjectExt=.wixproj
      -dProjectFileName=mlpack-win-installer.wixproj
      -dProjectName=mlpack-win-installer
      -dProjectPath=mlpack-win-installer.wixproj
      -dTargetDir=.\bin\x64\Release\
      -dTargetExt=.msi
      -dTargetFileName=mlpack-windows.msi
      -dTargetName=mlpack-windows
      -dTargetPath=.\bin\x64\Release\mlpack-windows.msi
      -out obj\x64\Release\
      -arch x64
      -ext "C:\Program Files (x86)\WiX Toolset v3.11\bin\\WixUIExtension.dll"
      Product.wxs HeatGeneratedFileList.wxs

      light -out .\bin\x64\Release\mlpack-%INSTALL_VERSION%.msi
      -pdbout .\bin\x64\Release\mlpack-windows.wixpdb
      -cultures:null
      -loc mlpack-localization.wxl
      -ext "C:\Program Files (x86)\WiX Toolset v3.11\bin\\WixUIExtension.dll"
      -contentsfile
      obj\x64\Release\mlpack-win-installer.wixproj.BindContentsFileListnull.txt
      -outputsfile
      obj\x64\Release\mlpack-win-installer.wixproj.BindOutputsFileListnull.txt
      -builtoutputsfile
      obj\x64\Release\mlpack-win-installer.wixproj.BindBuiltOutputsFileListnull.txt
      -wixprojectfile
      mlpack-win-installer.wixproj
      obj\x64\Release\Product.wixobj
      obj\x64\Release\HeatGeneratedFileList.wixobj
    displayName: 'Preparing installer staging'

# Publish build artifacts to Azure Pipelines
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'mlpack-windows-vs15-no-libs.zip'
      artifactName: 'mlpack-windows-vs15-no-libs.zip'
    displayName: 'Publish artifacts no-libs'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'mlpack-windows-vs15.zip'
      artifactName: 'mlpack-windows-vs15.zip'
    displayName: 'Publish artifacts complete'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: 'mlpack_test.xml'
      artifactName: 'mlpack_test_vs15.xml'
    displayName: 'Publish artifacts test results'
